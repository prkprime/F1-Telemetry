package dev.prkprime.f1telemetry.f122;

import org.junit.jupiter.api.Test;

import java.util.HexFormat;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class ConversionTest {
    @Test
    void test() {
        String sessionPacket = "e607010501017814710f44b68cd3b9c4c53b0000000000ff00251e0120180d1d0000005802500000ff000eb337893d00d016d93d00788f423e0049b0723e00dd7a943e00caf3bd3e00f0a3f03e001fae073f0002291c3f00365c2f3f001100403f00843d4a3f009816593f00dc74733fcc02000000";
        assertDoesNotThrow(() -> Packet.fromBytes(HexFormat.of().parseHex(sessionPacket)));
        Packet sessionPacketObject = Packet.fromBytes(HexFormat.of().parseHex(sessionPacket));
        assertNotNull(sessionPacketObject);

        String motionPacket = "e607010501007814710f44b68cd338b709435726000000ff21ac0a437d028a3fa0a131440134dcc1382fed3bad52a2c2e8d61100c88631798e02ead6cb61ee3bca44183e7842e239782334c0c0b399bc8cc2a3bc3dc34d4350789c3fc4d169447832a4c15d2c47beeb0693c216dc4a002785d47a7c0219dc00000000000000000000000028db36c0408a93bcac329fbc3f55084348fb823f960c32441c97d5c12990ad3c0ee7a1c249d8f5ff5686a47979024bd80000000000000000000000005edd34c0405d97bc734f9ebcfa92b742d10b813fd31d1544000000000000000000000000f1d60400c5863379de02f4d6000000000000000000000000542834c080a5adbcddb0b7bc302dca423f76923f6773164400000000000000000000000033d51d0060879b783f0235d50000000000000000000000006c3c33c0402f85bc5feb8fbc9b67c1420a287f3f4eef184400000000000000000000000065d705009e865b798f0267d7000000000000000000000000596534c080e79abc9dd2a3bc8ad5d4426ebe943f26371a4400000000000000000000000024d70400b48646798f0226d70000000000000000000000002c4334c0c0ea9abc7bd4a3bc9ffdcb42b16e803fc9b61c4400000000000000000000000057d60000fa8600798f025ad600000000000000000000000039d733c040e79abcb5d3a3bcfdcfdf42b2e1943f9ef71d4400000000000000000000000059d60000f986ff78de025cd6000000000000000000000000e2d733c0409aadbc42aeb7bcc0c6d64238eb823f9875204400000000000000000000000064d5fcff4f87aa78de0267d50000000000000000000000000e5633c00091adbc7cb1b7bc841bea4233f1953f55c521440000000000000000000000001ad70400b7864179de021dd7000000000000000000000000a73d34c0c0b2adbcc6b9b7bc39efe04219ff7f3f98412444000000000000000000000000e0d60200cb862f798f02e2d60000000000000000000000005f1f34c0c0e69abcdfd2a3bcdb58f442e777943f298c2544000000000000000000000000f7d5feff1b87df788f02f9d50000000000000000000000003ba433c040dd9abc21c9a3bc7a6beb429b0e803fa30b284400000000000000000000000061d5fbff5087aa788f0263d50000000000000000000000008d5433c040e69abc54d1a3bcde4f5d427d435d426cfb5b42c50f5c42293dbb3ea9ba10408b4585c0a1705440d687524260483742bf0dd9c4eaefc9445220ad42dc20ad4254b5ab42bfb5ab42a541253ce844253cf6f1e93a5cf4e93a25291c3cfdb21abd6d67ab42c733ba393726143a669032bb020220be9c58f3baf4e091be00000080";
        assertDoesNotThrow(() -> Packet.fromBytes(HexFormat.of().parseHex(motionPacket)));
        Packet motionPacketObject = Packet.fromBytes(HexFormat.of().parseHex(motionPacket));
        assertNotNull(motionPacketObject);

    }
}


